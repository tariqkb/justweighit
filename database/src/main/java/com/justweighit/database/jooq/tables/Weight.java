/*
 * This file is generated by jOOQ.
 */
package com.justweighit.database.jooq.tables;


import com.justweighit.database.jooq.Keys;
import com.justweighit.database.jooq.Public;
import com.justweighit.database.jooq.tables.records.WeightRecord;

import java.math.BigDecimal;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Weight extends TableImpl<WeightRecord> {

    private static final long serialVersionUID = -686721907;

    /**
     * The reference instance of <code>public.weight</code>
     */
    public static final Weight WEIGHT = new Weight();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<WeightRecord> getRecordType() {
        return WeightRecord.class;
    }

    /**
     * The column <code>public.weight.ndbno</code>.
     */
    public final TableField<WeightRecord, String> NDBNO = createField(DSL.name("ndbno"), org.jooq.impl.SQLDataType.VARCHAR(128).nullable(false), this, "");

    /**
     * The column <code>public.weight.amount</code>.
     */
    public final TableField<WeightRecord, BigDecimal> AMOUNT = createField(DSL.name("amount"), org.jooq.impl.SQLDataType.NUMERIC, this, "");

    /**
     * The column <code>public.weight.unit</code>.
     */
    public final TableField<WeightRecord, Integer> UNIT = createField(DSL.name("unit"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.weight.description</code>.
     */
    public final TableField<WeightRecord, String> DESCRIPTION = createField(DSL.name("description"), org.jooq.impl.SQLDataType.VARCHAR(256), this, "");

    /**
     * The column <code>public.weight.grams</code>.
     */
    public final TableField<WeightRecord, BigDecimal> GRAMS = createField(DSL.name("grams"), org.jooq.impl.SQLDataType.NUMERIC.nullable(false), this, "");

    /**
     * Create a <code>public.weight</code> table reference
     */
    public Weight() {
        this(DSL.name("weight"), null);
    }

    /**
     * Create an aliased <code>public.weight</code> table reference
     */
    public Weight(String alias) {
        this(DSL.name(alias), WEIGHT);
    }

    /**
     * Create an aliased <code>public.weight</code> table reference
     */
    public Weight(Name alias) {
        this(alias, WEIGHT);
    }

    private Weight(Name alias, Table<WeightRecord> aliased) {
        this(alias, aliased, null);
    }

    private Weight(Name alias, Table<WeightRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Weight(Table<O> child, ForeignKey<O, WeightRecord> key) {
        super(child, key, WEIGHT);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<ForeignKey<WeightRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<WeightRecord, ?>>asList(Keys.WEIGHT__FOOD_WEIGHT_KEY);
    }

    public Food food() {
        return new Food(this, Keys.WEIGHT__FOOD_WEIGHT_KEY);
    }

    @Override
    public Weight as(String alias) {
        return new Weight(DSL.name(alias), this);
    }

    @Override
    public Weight as(Name alias) {
        return new Weight(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Weight rename(String name) {
        return new Weight(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Weight rename(Name name) {
        return new Weight(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<String, BigDecimal, Integer, String, BigDecimal> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
