/*
 * This file is generated by jOOQ.
 */
package com.justweighit.database.jooq.tables;


import com.justweighit.database.jooq.Keys;
import com.justweighit.database.jooq.Public;
import com.justweighit.database.jooq.tables.records.FoodRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Food extends TableImpl<FoodRecord> {

    private static final long serialVersionUID = 67834257;

    /**
     * The reference instance of <code>public.food</code>
     */
    public static final Food FOOD = new Food();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FoodRecord> getRecordType() {
        return FoodRecord.class;
    }

    /**
     * The column <code>public.food.ndbno</code>.
     */
    public final TableField<FoodRecord, String> NDBNO = createField(DSL.name("ndbno"), org.jooq.impl.SQLDataType.VARCHAR(128).nullable(false), this, "");

    /**
     * The column <code>public.food.description</code>.
     */
    public final TableField<FoodRecord, String> DESCRIPTION = createField(DSL.name("description"), org.jooq.impl.SQLDataType.VARCHAR(1024), this, "");

    /**
     * The column <code>public.food.short_description</code>.
     */
    public final TableField<FoodRecord, String> SHORT_DESCRIPTION = createField(DSL.name("short_description"), org.jooq.impl.SQLDataType.VARCHAR(256), this, "");

    /**
     * Create a <code>public.food</code> table reference
     */
    public Food() {
        this(DSL.name("food"), null);
    }

    /**
     * Create an aliased <code>public.food</code> table reference
     */
    public Food(String alias) {
        this(DSL.name(alias), FOOD);
    }

    /**
     * Create an aliased <code>public.food</code> table reference
     */
    public Food(Name alias) {
        this(alias, FOOD);
    }

    private Food(Name alias, Table<FoodRecord> aliased) {
        this(alias, aliased, null);
    }

    private Food(Name alias, Table<FoodRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Food(Table<O> child, ForeignKey<O, FoodRecord> key) {
        super(child, key, FOOD);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<FoodRecord> getPrimaryKey() {
        return Keys.FOOD_PKEY;
    }

    @Override
    public List<UniqueKey<FoodRecord>> getKeys() {
        return Arrays.<UniqueKey<FoodRecord>>asList(Keys.FOOD_PKEY);
    }

    @Override
    public Food as(String alias) {
        return new Food(DSL.name(alias), this);
    }

    @Override
    public Food as(Name alias) {
        return new Food(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Food rename(String name) {
        return new Food(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Food rename(Name name) {
        return new Food(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<String, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
